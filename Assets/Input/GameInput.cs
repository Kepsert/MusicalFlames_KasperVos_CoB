//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""SequenceMinigame"",
            ""id"": ""5fe57e29-f7dd-4019-bcca-c8b6013c071f"",
            ""actions"": [
                {
                    ""name"": ""ToggleCandle"",
                    ""type"": ""Button"",
                    ""id"": ""57e6b3af-2e56-4c56-bdce-449e24fc39f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a7ea750-46fe-4613-baa8-f4b5a4b17a40"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleCandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c47b77f2-e9d4-47ac-99be-9fa6f10221a1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleCandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75f5a553-6119-4203-8679-23bfb714a388"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleCandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a7a2f5e-7429-4cbc-8610-37b462d6c66b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleCandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39e5d47c-d71b-4e0c-9ecc-75ead6c9017e"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=5)"",
                    ""groups"": ""KBM"",
                    ""action"": ""ToggleCandle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SequenceMinigame
        m_SequenceMinigame = asset.FindActionMap("SequenceMinigame", throwIfNotFound: true);
        m_SequenceMinigame_ToggleCandle = m_SequenceMinigame.FindAction("ToggleCandle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SequenceMinigame
    private readonly InputActionMap m_SequenceMinigame;
    private List<ISequenceMinigameActions> m_SequenceMinigameActionsCallbackInterfaces = new List<ISequenceMinigameActions>();
    private readonly InputAction m_SequenceMinigame_ToggleCandle;
    public struct SequenceMinigameActions
    {
        private @GameInput m_Wrapper;
        public SequenceMinigameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleCandle => m_Wrapper.m_SequenceMinigame_ToggleCandle;
        public InputActionMap Get() { return m_Wrapper.m_SequenceMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SequenceMinigameActions set) { return set.Get(); }
        public void AddCallbacks(ISequenceMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_SequenceMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SequenceMinigameActionsCallbackInterfaces.Add(instance);
            @ToggleCandle.started += instance.OnToggleCandle;
            @ToggleCandle.performed += instance.OnToggleCandle;
            @ToggleCandle.canceled += instance.OnToggleCandle;
        }

        private void UnregisterCallbacks(ISequenceMinigameActions instance)
        {
            @ToggleCandle.started -= instance.OnToggleCandle;
            @ToggleCandle.performed -= instance.OnToggleCandle;
            @ToggleCandle.canceled -= instance.OnToggleCandle;
        }

        public void RemoveCallbacks(ISequenceMinigameActions instance)
        {
            if (m_Wrapper.m_SequenceMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISequenceMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_SequenceMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SequenceMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SequenceMinigameActions @SequenceMinigame => new SequenceMinigameActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface ISequenceMinigameActions
    {
        void OnToggleCandle(InputAction.CallbackContext context);
    }
}
